}
}
tree <- paste(taxa[[1]], ";", sep = "")
tree <- read.newick(text = tree)
tree$edge.length <- rep(1/ (log2(n)), nrow(tree$edge))
return(tree)
}
#function to make a perfectly asymmetrical tree with a height of 1
make.asym.tree <- function(n = 32){
taxa <- paste("t", 1:n, sep = "")
taxa <- as.list(taxa)
bl <- 1/(n - 1)
tree <- paste(taxa[[1]], ":", bl, sep = "")
for(i in 2:n){
tree <- paste("(", tree, ",", taxa[[i]], ":", (bl * (i-1)), ")", sep = "")
if(i != n){
tree <- paste(tree, ":", bl, sep = "")
}
}
tree <- paste(tree, ";", sep = "")
tree <- read.newick(text = tree)
return(tree)
}
#最后要用循环写出来
#---------------------------------------------------------------------------------------
#make a symmetrical tree of 32 tips
t32_sym <- make.sym.tree()
plot(t32_sym, cex = 0.5)
View(t32_sym)
etree <- read.tree("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/Tetrapods_202_42_mrb_undated.con.tre")
etree <- read.tree("/Users/Eagle/Desktop/ASR/经验数据/X26094_Tetrapodomorph_phylogeny_morphobank.nex")
etree <- read.tree("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/Tetrapods_202_42_mrb_undated.con.tre")
etree <- read.tree("/Users/Eagle/Desktop/ASR/经验数据/X26094_Tetrapodomorph_phylogeny_morphobank.nex")
library(ape)
edata1 <- read.nexus.data("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/X26094_Tetrapodomorph_phylogeny_morphobank.nex")
library(paleotree)
timePaleoPhy()
etree <- read.tree("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/Tetrapods_202_42_mrb_undated.tree")
etree <- read.tree("/Users/Eagle/Desktop/ASR/经验数据/X26094_Tetrapodomorph_phylogeny_morphobank.nex")
etree <- read.tree("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/1.tre")
rm(list=ls())
library(phytools)
library(ape)
library(phangorn)
tree <- structure(list(edge = structure(c(15L, 17L, 16L, 16L, 25L, 26L,
26L, 25L, 17L, 18L, 19L, 20L, 20L, 19L, 18L, 21L, 22L, 22L, 23L,
24L, 24L, 23L, 21L, 15L, 15L, 17L, 16L, 11L, 25L, 26L, 12L, 13L,
14L, 18L, 19L, 20L, 3L, 4L, 5L, 21L, 22L, 6L, 23L, 24L, 7L, 8L,
9L, 10L, 2L, 1L), .Dim = c(25L, 2L)), tip.label = c("outgroup",
"t1", "t5", "t11", "t9", "t4", "t2", "t8", "t6", "t12", "t7",
"t3", "t10", "t13"), Nnode = 12L, edge.length = c(0.0874834069982171,
0.244185614865273, 0.430847519310191, 1.37665028986521, 0.367445018142462,
0.752470129402354, 0.389248003251851, 0.530258718878031, 0.19548284006305,
0.192630142439157, 0.212866172427312, 0.397546381922439, 0.116917465114966,
0.87381496746093, 0.293970214435831, 0.0244216877035797, 0.696878514019772,
0.257878425298259, 0.492508469382301, 0.111304241931066, 0.854285338660702,
0.33424942730926, 0.505031883949414, 0.64498959062621, 0.843943994492292
)), class = "phylo", order = "cladewise")
View(tree)
plot(tree)
is.rooted(tree)
# get outgroup node label
outgroup <- which(tree$tip.label == "outgroup")
# find the edge leading to the outgroup
root.edge <- which(tree$edge[,2] == outgroup)
#root tree half way along root edge
tree_rooted <- reroot(tree, outgroup, position = (tree$edge.length[[root.edge]]/ 2))
is.rooted(tree_rooted)
plot(tree_rooted)
tree2 <- tree
tree2$tip.label[[1]] <- "outgroup1"
tree2$tip.label[[2]] <- "outgroup2"
plot(tree2)
is.rooted(tree2)
# define the ingroup
ingroup <- setdiff(tree2$tip.label, c("outgroup1","outgroup2"))
#get mrca of ingroup
ingroup_anc <- getMRCA(tree2, ingroup)
# find the root edge == the edge leading to the mrca of the ingroup
root.edge <- which(tree2$edge[,2] == ingroup_anc)
#root tree half way along root edge
tree2_rooted <- reroot(tree2, ingroup_anc, position = (tree2$edge.length[[root.edge]]/ 2))
is.rooted(tree2_rooted)
plot(tree2_rooted)
etree <- read.tree("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/1.tre")
edata1 <- read.nexus.data("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/2.nex")
library(ape)
edata1 <- read.nexus.data("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/2.nex")
etree <- read.nexus("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/2.nex")
etree <- read.tree("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/1.tre")
plot(etree)
source('~/Desktop/ASR/test/ecode.R')
#build a 256 tips tree:symmetric and asymmetric
library(phangorn)
library(phytools)
library(castor)
make.sym.tree <- function(n = 32){
if(((log2(n))%%1==0) == FALSE){
stop("n is not in the geometric sequence: a1= 2, r = 2")
}
taxa <- paste("t", 1:n, sep = "")
taxa <- as.list(taxa)
repeat{
taxa2 <- list()
j <- 0
for(i in 1:(length(taxa)/2)){
taxa2[[i]] <- paste("(", taxa[[(i + j)]], ",", taxa[[(i + j + 1)]], ")", sep = "")
j <- j + 1
}
taxa <- taxa2
if(length(taxa) == 1){
break
}
}
tree <- paste(taxa[[1]], ";", sep = "")
tree <- read.newick(text = tree)
tree$edge.length <- rep(1/ (log2(n)), nrow(tree$edge))
return(tree)
}
#function to make a perfectly asymmetrical tree with a height of 1
make.asym.tree <- function(n = 32){
taxa <- paste("t", 1:n, sep = "")
taxa <- as.list(taxa)
bl <- 1/(n - 1)
tree <- paste(taxa[[1]], ":", bl, sep = "")
for(i in 2:n){
tree <- paste("(", tree, ",", taxa[[i]], ":", (bl * (i-1)), ")", sep = "")
if(i != n){
tree <- paste(tree, ":", bl, sep = "")
}
}
tree <- paste(tree, ";", sep = "")
tree <- read.newick(text = tree)
return(tree)
}
#最后要用循环写出来
#---------------------------------------------------------------------------------------
#make a symmetrical tree of 32 tips
t32_sym <- make.sym.tree()
plot(t32_sym, cex = 0.5)
#make a asymmetrical tree of 32 tips
t32_asym<- make.asym.tree()
plot(t32_asym, cex = 0.5)
#---------------------------------------------------------------------------------------
#make a symmetrical tree of 64 tips
t64_sym <- make.sym.tree(64)
library(phytools)
library(ape)
library(phangorn)
tree <- structure(list(edge = structure(c(15L, 17L, 16L, 16L, 25L, 26L,
26L, 25L, 17L, 18L, 19L, 20L, 20L, 19L, 18L, 21L, 22L, 22L, 23L,
24L, 24L, 23L, 21L, 15L, 15L, 17L, 16L, 11L, 25L, 26L, 12L, 13L,
14L, 18L, 19L, 20L, 3L, 4L, 5L, 21L, 22L, 6L, 23L, 24L, 7L, 8L,
9L, 10L, 2L, 1L), .Dim = c(25L, 2L)), tip.label = c("outgroup",
"t1", "t5", "t11", "t9", "t4", "t2", "t8", "t6", "t12", "t7",
"t3", "t10", "t13"), Nnode = 12L, edge.length = c(0.0874834069982171,
0.244185614865273, 0.430847519310191, 1.37665028986521, 0.367445018142462,
0.752470129402354, 0.389248003251851, 0.530258718878031, 0.19548284006305,
0.192630142439157, 0.212866172427312, 0.397546381922439, 0.116917465114966,
0.87381496746093, 0.293970214435831, 0.0244216877035797, 0.696878514019772,
0.257878425298259, 0.492508469382301, 0.111304241931066, 0.854285338660702,
0.33424942730926, 0.505031883949414, 0.64498959062621, 0.843943994492292
)), class = "phylo", order = "cladewise")
plot(tree)
tree$edge
is.rooted(etree)
plot(etree)
rm(list=ls())
library(ape)
library(phytools)
#because the raw .tree file can not be read, so have to transfer it to .nexus by figtree app
tree <- read.nexus("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/2.nex")
plot(tree)
is.rooted(tree)
# get outgroup node label
outgroup <- which(tree$tip.label == "Youngolepis")
# find the edge leading to the outgroup
root.edge <- which(tree$edge[,2] == outgroup)
#root tree half way along root edge
tree_rooted <- reroot(tree, outgroup, position = (tree$edge.length[[root.edge]]/ 2))
is.rooted(tree_rooted)
plot(tree_rooted)
Q <- get_random_mk_transition_matrix(3, rate_model=ER_order, min_rate=0.33, max_rate=0.66)
tree1 <- timePaleoPhy(tree_rooted)
data(retiolitinae)
Q <- get_random_mk_transition_matrix(3, rate_model=ER_order, min_rate=0.33, max_rate=0.66)
data(retiolitinae)
plot(retioTree)
taxicDivDisc(retioRanges)
ttree <- bin_timePaleoPhy(
tree = retioTree,
timeList = retioRanges,
type = "basic",
ntrees = 1,
plot = TRUE
)
plot(retioTree)
str(tree_rooted)
text.string <- "(((((((cow, pig),whale),(bat,(lemur,human))),(robin,iguana)),coelacanth),gold_fish),shark);"
vertebrate.tree <- read.tree(text=text.string)
plot(vertebrate.tree, no.margin=TRUE, edge.width=2, type = "cladogram")
str(vertebrate.tree)
is.rooted(vertebrate.tree)
plot(vertebrate.tree, edge.width = 2, label.offset = 0.2, type = "cladogram") nodelabels()
tiplabels()
plot(vertebrate.tree, edge.width = 2, label.offset = 0.2, type = "cladogram")
nodelabels()
tiplabels()
vertebrate.tree$edge.length # NULL
vertebrate.tree$edge.length <- rep(1,nrow(vertebrate.tree$edge))
# for this, we use the function 'rep' meaning repeat, we then repeat the number '1' for the number of edges (branches) in the phylogenetic tree called 'vertebrate.tree'
vertebrate.tree$edge.length vertebrate.tree
vertebrate.tree$edge.length # NULL
vertebrate.tree$edge.length <- rep(1,nrow(vertebrate.tree$edge))
# for this, we use the function 'rep' meaning repeat, we then repeat the number '1' for the number of edges (branches) in the phylogenetic tree called 'vertebrate.tree'
vertebrate.tree$edge.length
vertebrate.tree
plot(vertebrate.tree, no.margin=TRUE, edge.width=2, type = "cladogram")
plot(vertebrate.tree, no.margin=TRUE, edge.width=2, label.offset = 0.2, type = "phylogram")
tree_rooted$tip.label
tree1 <- read.nexus("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/m.nex")
View(retioRanges)
tree1 <- read.tree("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/m.nex")
tree1 <- read.newick("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/m.nex")
tree1 <- read.nexus.data("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/m.nex")
View(tree1)
str(tree1)
tree1$Youngolepis
tree1$Youngolepis[1]
tree1$Youngolepis[202]
tree1$Youngolepis[201]
rownames(tree1)
tree2=as.data.frame(tree1)
str(tree2)
View(tree2)
rownames(tree2)
identical(tree$tip.label,colnames(tree2))
tree3 <- tree2[match(tree$tip.label,colnames(tree2)),]
identical(tree$tip.label,colnames(tree3))
View(tree3)
View(tree2)
tree2=as.data.frame(t(tree1))
tree2=t(as.data.frame((tree1))
)
tree2=as.data.frame(tree2)
View(tree2)
rownames(tree2)
identical(tree_rooted$tip.label,rownames(tree2))
tree2 <- tree2[match(tree_rooted$tip.label,rownames(tree2)),]
identical(tree_rooted$tip.label,rownames(tree2))
rownames(tree2)
rm(list=ls())
library(ape)
library(paleotree)
library(phytools)
clear
rm(list=ls())
library(ape)
library(paleotree)
library(phytools)
#because the raw .tree file can not be read, so have to transfer it to .nexus by figtree app
tree <- read.nexus("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/2.nex")
char <- read.nexus.data("/Users/Eagle/Desktop/ASR/经验数据/41586_2020_2100_MOESM3_ESM/m.nex")
plot(tree)
is.rooted(tree)
# get outgroup node label
outgroup <- which(tree$tip.label == "Youngolepis")
# find the edge leading to the outgroup
root.edge <- which(tree$edge[,2] == outgroup)
#root tree half way along root edge
tree_rooted <- reroot(tree, outgroup, position = (tree$edge.length[[root.edge]]/ 2))
is.rooted(tree_rooted)
plot(tree_rooted)
tree <- tree_rooted
#开始验证tips名字和character数据集的名字的顺序是否一样
identical(tree$tip.label,rownames(char))
char <- t(as.data.frame(char))
char <- as.data.frame(char)
identical(tree$tip.label,rownames(char))
View(char)
char <- char[match(tree$tip.label,rownames(char)),]
identical(tree$tip.label,rownames(char))
char[,1]
char[,2]
char[,3]
char[,4]
char[,5]
char[,6]
char[,7]
char[,8]
char[,9]
char[,10]
#开始映射
char_data <- as.vector(char[,10])
names(char_data) <- rownames(char)
char_data
#开始映射
char_data <- char[,10]
names(char_data) <- rownames(char)
char_data
#做个树看看
eco.plot.cols <- setNames(c("gray","darkblue"),c("epifaunal","infaunal"))
dotTree(tree, char_data, colors=eco.plot.cols)
#做个树看看
eco.plot.cols <- setNames(c("blue","green","red"),c(1,2,3))
dotTree(tree, char_data, colors=eco.plot.cols)
Q <- get_random_mk_transition_matrix(3, rate_model=ER_order, min_rate=0.33, max_rate=0.66)
#做个树看看
eco.plot.cols <- setNames(c("blue","green","red","grey"),c(0,1,2,"?"))
dotTree(tree, char_data, colors=eco.plot.cols)
table(char_data)
structure(c(0, 1, 0.33, 1, 0, 0.33, 0, 0, 0.33), .Dim = c(3L,
3L), .Dimnames = list(c("tip1", "tip2", "tip3"), c("state_A",
"state_B", "state_C")))
ER_order <- matrix(c(0,1,0, 1,0,1, 0,1,0),3,3,byrow=TRUE,
dimnames=list(c("a","b","c"),c("a","b","c")))
ER_order
SYM_incorder <- matrix(c(0,0,1, 0,0,2, 1,2,0),3,3,byrow=TRUE,
dimnames=list(c(0,1,2),c(0,1,2)))
SYM_incorder
tip_states
#编辑不同的模型
ER_order <- matrix(c(0,1,0, 1,0,1, 0,1,0),3,3,byrow=TRUE,
dimnames=list(c(0,1,2),c(0,1,2)))
Q <- get_random_mk_transition_matrix(3, rate_model=ER_order, max_rate=0.5)
E <- simulate_mk_model(tree, Q)
tip_states <- E$tip_states
tip_states
char_data
str(tip_states)
str(char_data)
as.integer(char_data)
char[,10]
class(tip_states)
class(char_data)
as.numeric(char_data)
as.numeric(as.character(char[,10]))
structure(c(0.33, 0.33, 1, 0, 0.33, 0, 0, 0.33), .Dim = c(42L,3L), .Dimnames = list(c("tip1", "tip2", "tip3"), c("state_A","state_B", "state_C")))
c(42L,3L)
View(char)
char_data
0,1,1,1,0,0,0,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33
c(0,1,1,1,0,0,0,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33)
c(0,1,1,1,0,0,0,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,1,0,0,0,0,1,1,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,0,0,0,0,1,0,0,0.33,1,1,0.33,1,0.33,0.33,1,1,1,1,1,1,1,0.33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.33)
structure(c(0,1,1,1,0,0,0,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,1,0,0,0,0,1,1,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,0,0,0,0,1,0,0,0.33,1,1,0.33,1,0.33,0.33,1,1,1,1,1,1,1,0.33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.33), .Dim = c(42L,3L), .Dimnames = list(c("tip1", "tip2", "tip3"), c("state_A","state_B", "state_C")))
structure(c(0,1,1,1,0,0,0,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,1,0,0,0,0,1,1,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,0,0,0,0,1,0,0,0.33,1,1,0.33,1,0.33,0.33,1,1,1,1,1,1,1,0.33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.33), .Dim = c(42L,3L), .Dimnames = list(c(1:42), c("state_A","state_B", "state_C")))
structure(c(0,1,1,1,0,0,0,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,1,0,0,0,0,1,1,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,0,0,0,0,1,0,0,0.33,1,1,0.33,1,0.33,0.33,1,1,1,1,1,1,1,0.33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.33), .Dim = c(42L,3L), .Dimnames = list(c(1:42), c(0,1,2)))
#编辑不同的模型
ER_order <- matrix(c(0,1,0, 1,0,1, 0,1,0),3,3,byrow=TRUE,
dimnames=list(c(0,1,2),c(0,1,2)))
ER_unorder <- matrix(c(0,1,1, 1,0,1, 1,1,0),3,3,byrow=TRUE,
dimnames=list(c(0,1,2),c(0,1,2)))
ER_incorder <- matrix(c(0,0,1, 0,0,1, 1,1,0),3,3,byrow=TRUE,
dimnames=list(c(0,1,2),c(0,1,2)))
ARD_order <- matrix(c(0,1,0, 2,0,3, 0,4,0),3,3,byrow=TRUE,
dimnames=list(c(0,1,2),c(0,1,2)))
ARD_unorder <- matrix(c(0,1,2, 3,0,4, 5,6,0),3,3,byrow=TRUE,
dimnames=list(c(0,1,2),c(0,1,2)))
ARD_incorder <- matrix(c(0,0,1, 0,0,2, 3,4,0),3,3,byrow=TRUE,
dimnames=list(c(0,1,2),c(0,1,2)))
SYM_order <- matrix(c(0,1,0, 1,0,2, 0,2,0),3,3,byrow=TRUE,
dimnames=list(c(0,1,2),c(0,1,2)))
SYM_unorder <- matrix(c(0,1,2, 1,0,3, 2,3,0),3,3,byrow=TRUE,
dimnames=list(c(0,1,2),c(0,1,2)))
SYM_incorder <- matrix(c(0,0,1, 0,0,2, 1,2,0),3,3,byrow=TRUE,
dimnames=list(c(0,1,2),c(0,1,2)))
x<-structure(c(0,1,1,1,0,0,0,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,1,0,0,0,0,1,1,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,0,0,0,0,1,0,0,0.33,1,1,0.33,1,0.33,0.33,1,1,1,1,1,1,1,0.33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.33), .Dim = c(42L,3L), .Dimnames = list(c(1:42), c(0,1,2)))
#进行ASR预测最终祖先的性状，并进行比较分析
results_ER_order <-  asr_mk_model(tree, tip_priors = x, 3,rate_model=ER_order, Ntrials=2)
#进行ASR预测最终祖先的性状，并进行比较分析
results_ER_order <-  asr_mk_model(tree, 3,tip_priors = x, rate_model=ER_order, Ntrials=2)
#进行ASR预测最终祖先的性状，并进行比较分析
results_ER_order <-  asr_mk_model(tree,tip_priors = x, rate_model=ER_order, Ntrials=2)
#进行ASR预测最终祖先的性状，并进行比较分析
results_ER_order <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x, rate_model=ER_order, Ntrials=2)
x<-structure(c(0,1,1,1,0,0,0,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,1,0,0,0,0,1,1,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,0,0,0,0,1,0,0,0.33,1,1,0.33,1,0.33,0.33,1,1,1,1,1,1,1,0.33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.33), .Dim = names(char_data), .Dimnames = list(c(1:42), c(0,1,2)))
x<-structure(c(0,1,1,1,0,0,0,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,1,0,0,0,0,1,1,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,0,0,0,0,1,0,0,0.33,1,1,0.33,1,0.33,0.33,1,1,1,1,1,1,1,0.33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.33), .Dim = rownames(char), .Dimnames = list(c(1:42), c(0,1,2)))
x<-structure(c(0,1,1,1,0,0,0,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,1,0,0,0,0,1,1,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,0,0,0,0,1,0,0,0.33,1,1,0.33,1,0.33,0.33,1,1,1,1,1,1,1,0.33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.33), .Dim = c(rownames(char)), .Dimnames = list(c(1:42), c(0,1,2)))
rownames(char)
str(rownameschar)
str(rownames(char))
yyy=c('1','222')
str(yyy)
x<-structure(c(0,1,1,1,0,0,0,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,1,0,0,0,0,1,1,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,0,0,0,0,1,0,0,0.33,1,1,0.33,1,0.33,0.33,1,1,1,1,1,1,1,0.33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.33), .Dim = yyy, .Dimnames = list(c(1:42), c(0,1,2)))
yyy
yyy=rownames(char)
yyy
x<-structure(c(0,1,1,1,0,0,0,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,1,0,0,0,0,1,1,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,0,0,0,0,1,0,0,0.33,1,1,0.33,1,0.33,0.33,1,1,1,1,1,1,1,0.33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.33), .Dim = yyy, .Dimnames = list(c(1:42), c(0,1,2)))
x<-structure(c(0,1,1,1,0,0,0,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,1,0,0,0,0,1,1,0.33,0,0,0.33,0,0.33,0.33,0,0,0,0,0,0,0,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.33,0,0,0,0,1,0,0,0.33,1,1,0.33,1,0.33,0.33,1,1,1,1,1,1,1,0.33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.33), .Dim = c(42L,3L), .Dimnames = list(rownames(char), c(0,1,2)))
#进行ASR预测最终祖先的性状，并进行比较分析
results_ER_order <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x, rate_model=ER_order, Ntrials=2)
results_ER_unorder <-  asr_mk_model(tree, 3,tip_priors = x, rate_model=ER_unorder, Ntrials=2)
results_ER_order <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x,rate_model = ER_order,Ntrials = 2)
results_ER_order
ans_state_ER_order <- results_ER_order$ancestral_likelihoods[,41]
ans_state_ER_order <- results_ER_order$ancestral_likelihoods[41,]
results_ER_unorder <-  asr_mk_model(tree, tip_states = NULL,rate_model=ER_unorder, Ntrials=2)
results_ER_unorder <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x,rate_model=ER_unorder, Ntrials=2)
results_ER_incorder <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x,rate_model=ER_incorder, Ntrials=2)
#results_pars_order <- asr_max_parsimony(tree,tip_states = NULL,tip_priors = x,transition_costs = "sequential")
#results_pars_unorder <- asr_max_parsimony(tree, tip_states = NULL,tip_priors = x,transition_costs = ER_unorder)
#results_pars_incorder <- asr_max_parsimony(tree,tip_states = NULL,tip_priors = x,transition_costs = ER_incorder)
results_ARD_order <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x,rate_model=ARD_order, Ntrials=2)
results_ARD_unorder <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x,rate_model=ARD_unorder, Ntrials=2)
results_ARD_incorder <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x,rate_model=ARD_incorder, Ntrials=2)
results_SYM_order <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x,rate_model=SYM_order, Ntrials=2)
results_SYM_unorder <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x,rate_model=SYM_unorder, Ntrials=2)
results_SYM_incorder <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x,rate_model=SYM_incorder, Ntrials=2)
ans_state_ER_order <- results_ER_order$ancestral_likelihoods[41,]
ans_state_ER_unorder <- results_ER_unorder$ancestral_likelihoods[41,]
ans_state_ER_incorder <- results_ER_incorder$ancestral_likelihoods[41,]
ans_state_ARD_order <- results_ARD_order$ancestral_likelihoods[41,]
ans_state_ARD_unorder <- results_ARD_unorder$ancestral_likelihoods[41,]
ans_state_ARD_incorder <- results_ARD_incorder$ancestral_likelihoods[41,]
ans_state_SYM_order <- results_SYM_order$ancestral_likelihoods[41,]
ans_state_SYM_unorder <- results_SYM_unorder$ancestral_likelihoods[41,]
ans_state_SYM_incorder <- results_SYM_incorder$ancestral_likelihoods[41,]
results_ARD_incorder
results_ARD_order
results_ARD_unorder
#results_pars_order <- asr_max_parsimony(tree,tip_states = NULL,tip_priors = x,transition_costs = "sequential")
#results_pars_unorder <- asr_max_parsimony(tree, tip_states = NULL,tip_priors = x,transition_costs = ER_unorder)
#results_pars_incorder <- asr_max_parsimony(tree,tip_states = NULL,tip_priors = x,transition_costs = ER_incorder)
results_ARD_order <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x,rate_model=ARD_order, Ntrials=2)
results_ARD_unorder <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x,rate_model=ARD_unorder, Ntrials=2)
results_ARD_incorder <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x,rate_model=ARD_incorder, Ntrials=2)
ans_state_ARD_order <- results_ARD_order$ancestral_likelihoods[41,]
ans_state_ARD_unorder <- results_ARD_unorder$ancestral_likelihoods[41,]
ans_state_ARD_incorder <- results_ARD_incorder$ancestral_likelihoods[41,]
results_ARD_order
#进行ASR预测最终祖先的性状，并进行比较分析
results_ER_order <-  asr_mk_model(tree,tip_states = NULL,tip_priors = x,rate_model = ER_order,Ntrials = 2)
results_ER_order
results_ER_order
results_ER_order
results_ER_unorder
results_ARD_incorder
results_SYM_order
results_SYM_unorder
str(ans_state_ARD_incorder)
ans_state_ARD_incorder
class(ans_state_ARD_incorder)
merge(ans_state_ARD_incorder,ans_state_ARD_order)
rbind(ans_state_ARD_incorder,ans_state_ARD_order)
rbind(ans_state_ARD_incorder,ans_state_ARD_order,ans_state_ER_incorder)
class(rbind(ans_state_ARD_incorder,ans_state_ARD_order,ans_state_ER_incorder))
class(rbind.data.frame(ans_state_ARD_incorder,ans_state_ARD_order,ans_state_ER_incorder))
all_results <- rbind.data.frame(ans_state_ER_order,ans_state_ER_unorder,ans_state_ER_incorder,ans_state_ARD_order,ans_state_ARD_unorder,ans_state_ARD_incorder,ans_state_SYM_order,ans_state_SYM_unorder,ans_state_SYM_incorder)
all_results
View(all_results)
all_results <- rbind.data.frame(ans_state_ER_order,ans_state_ER_unorder,ans_state_ER_incorder,ans_state_ARD_order,ans_state_ARD_unorder,ans_state_ARD_incorder,ans_state_SYM_order,ans_state_SYM_unorder,ans_state_SYM_incorder)
rownames(all_results)  <- c('ER_order','ER_un','ER_inc','ARD_order','ARD_un','ARD_inc','SYM_order','SYM_un','SYM_inc')
View(all_results)
library(ggplot2)
hotplot(all_results)
p <- ggplot(data_m, aes(x=variable,y=ID))
p <- p + geom_tile(aes(fill=value))
p <- ggplot(all_results, aes(x=variable,y=ID))
p <- p + geom_tile(aes(fill=value))
p
ggplot(all_results, aes(x=variable,y=ID))
p <- ggplot(all_results)
p
p <- heatmap(all_results)
all_results <- rbind(ans_state_ER_order,ans_state_ER_unorder,ans_state_ER_incorder,ans_state_ARD_order,ans_state_ARD_unorder,ans_state_ARD_incorder,ans_state_SYM_order,ans_state_SYM_unorder,ans_state_SYM_incorder)
rownames(all_results)  <- c('ER_order','ER_un','ER_inc','ARD_order','ARD_un','ARD_inc','SYM_order','SYM_un','SYM_inc')
library(ggplot2)
p <- heatmap(all_results,x = )
View(all_results)
library(pheatmap)
install.packages('pheatmap')
library(pheatmap)
p <- pheatmap(all_results)
pheatmap(all_results,
scale = "none",
color = c(colorRampPalette(colors = c("green","white"))(length(bk)/2),colorRampPalette(colors = c("white","red"))(length(bk)/2)),
legend_breaks=seq(0,1,0),
breaks=bk)
pheatmap(all_results,
scale = "none",
color = c(colorRampPalette(colors = c("green","white"))(length(bk)/2),colorRampPalette(colors = c("white","red"))(length(bk)/2)),
legend_breaks=seq(0,2,1),
breaks=bk)
pheatmap(all_results,
scale = "none",
color = colorRampPalette(colors = c("blue","white","red"))(100)
)
p <- pheatmap(all_results)
class(all_results)
round(all_results,4)
all_results <-round(all_results,4)
library(pheatmap)
pheatmap(all_results,)
pheatmap(all_results,display_numbers = TRUE)
pheatmap(all_results,display_numbers = TRUE,number_color = "white")
pheatmap(all_results,display_numbers = TRUE,number_color = "green")
# library
rm(list=ls())
library(ggridges)
library(ggplot2)
library(dplyr)
library(tidyr)
library(forcats)
library(Rmisc)
library(ggpubr)
load('final_.Rdata')
load('/Rdata/final_.Rdata')
load('Rdata/final_.Rdata')
load('//Rdata/final_.Rdata')
load('//Rdata/final1.Rdata')
load('/Rdata/final1.Rdata')
load('Rdata/final1.Rdata')
